// <auto-generated />
using System;
using GymApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymApp.Data.Migrations
{
    [DbContext(typeof(GymAppDbContext))]
    [Migration("20230811131432_UpdateNormalizedEmailOfMonikaUser")]
    partial class UpdateNormalizedEmailOfMonikaUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GymApp.Data.Models.Accessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Benefits")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Accessories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Benefits = "The 4-layer leather belt with an adjustable section provides stability and durabilitywhile //ensuring comfort, offering support during weightlifting and is suitable for individuals engaging inheavy/ /lifting.",
                            Description = "The LEVER weightlifting belt is a practical device designed for individuals engaged in /strength training, aiming to increase the weights they lift; it helps stabilize the core and lower back muscles, /boosting your confidence and enabling you to lift heavier weights. Made from 4-layered material /- 2inner layers /of cowhide and suede covered with 2 outer layers of buffalo suede - it ensures stability/ anddurability while /fitting perfectly to your body; the belt also features an adjustable section to /accommodateyour waist size, /eliminating concerns about it being too large or small. If you want to /enhance the weightslifted during squats or/ deadlifts, this high-quality leather belt should undoubtedly /be part of your fitnessarsenal.",
                            ImageUrl = "https://gymbeam.bg/media/catalog/product/cache/70f742f66feec18cb83790f14444a3d1/w/e//weightlifting-belt-lever-gymbeam_5_.jpg",
                            Manufacturer = "GymBeam",
                            Name = "Weight belt LEVER Black",
                            Price = 99.99m,
                            Type = "Accessory"
                        },
                        new
                        {
                            Id = 2,
                            Benefits = "The Ronnie fitness gloves protect hands from injuries, calluses, and abrasions, providinga //secure grip during workouts with fitness equipment, bars, or weights; they are perfect for strength training, have/ an ergonomic shape for long-lasting durability, and fit hands comfortably without /squeezingfingers.",
                            Description = "The Ronnie fitness gloves are high-quality exercise gloves made of split leather witha //rubber-padded cowhide interior for an ideal fit and intense workout protection for every athlete; they /are reinforced with a double lining in the palm area for durability and resistance against wear, designed/ for professional athletes seeking superior hand protection during training, guarding against scratches, /calluses,and /impacts while providing a secure grip on workout equipment, but they should not be machine /washed.",
                            ImageUrl = "https://gymbeam.bg/media/catalog/product/cache/70f742f66feec18cb83790f14444a3d1/r/u//rukavice_2j_1.jpg",
                            Manufacturer = "GymBeam",
                            Name = "Fitness gloves Ronnie",
                            Price = 19.99m,
                            Type = "Accessory"
                        },
                        new
                        {
                            Id = 3,
                            Benefits = "This 700ml shaker, made of high-quality polypropylene PP, is perfect for mixing allsoluble //dietary supplements, featuring a leak-proof screw-on lid, a cone-shaped filter to prevent lumps, milliliter (ml) /and ounce (oz) markings, break-resistant, dishwasher, microwave, and fridge safe, BPA and/ DEHPfree, and compliant/ with food regulations.",
                            Description = "The green shaker is a classic 700ml shaker with a traditional closure and filter,perfect //for mixing your favorite proteins, pre-workout stimulants, and creatine; made of non-toxic plasticand /free from /BPA and DEHP.",
                            ImageUrl = "https://gymbeam.bg/media/catalog/product/cache/70f742f66feec18cb83790f14444a3d1/s/h//shaker_yellow_green.jpg",
                            Manufacturer = "GymBeam",
                            Name = "Green shaker 700ml",
                            Price = 7.99m,
                            Type = "Accessory"
                        },
                        new
                        {
                            Id = 4,
                            Benefits = "Made of 100% cotton, this towel has anti-static and antibacterial properties, driesquickly, //absorbs efficiently, feels soft and pleasant to touch, and boasts a long lifespan.",
                            Description = "This gray fitness and workout towel, made of 100% soft and pleasant-to-touch cotton, stands /out with its excellent absorption, high durability, and anti-static, antibacterial properties. With /dimensions of 50x90 cm, this towel possesses these qualities naturally, without the use of any chemical compounds,/ making it suitable for individuals with sensitive skin or allergies, as it does not cause /allergicreactions. /Every athlete recognizes the significance of a workout towel, an essential accessory /in the gym, no only to wipe /away sweat from the face but also to provide a clean surface for various /exercises, such as forabdominal /workouts, seating, or under the feet during exercises. Not having a /workout towel in the gym is apure faux pas /(embarrassing mistake) and can easily be avoided to prevent /someone from asking, \"Where is yourtowel?\"",
                            ImageUrl = "https://gymbeam.bg/media/catalog/product/cache/70f742f66feec18cb83790f14444a3d1/g/r//grey_fitness_towel_gymbeam_1_.jpg",
                            Manufacturer = "GymBeam",
                            Name = "Towel for fitness",
                            Price = 14.99m,
                            Type = "Accessory"
                        });
                });

            modelBuilder.Entity("GymApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModerator")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f37fa09c-9247-42c4-b748-b5c8e10c6af9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1758e956-e02d-490a-89bd-4e10dcc0d01d",
                            CreatedOn = new DateTime(2023, 8, 11, 13, 14, 31, 777, DateTimeKind.Utc).AddTicks(4656),
                            Email = "vlado01@abv.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            IsModerator = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VLADO01@ABV.COM",
                            NormalizedUserName = "VLADO-01",
                            PasswordHash = "AQAAAAEAACcQAAAAEI7+WEHV8uy3VhSCmxTHuP0cS47voGDv3SIaomVRv/H1RPwnlnmw7B+G+4mvQmHCtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "SecurityStamp01",
                            TwoFactorEnabled = false,
                            UserName = "Vlado-01"
                        },
                        new
                        {
                            Id = new Guid("a82fbea5-96ff-48f0-be6f-e32f27604bff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92a98427-eaf9-4818-9220-e9e2c7e089b8",
                            CreatedOn = new DateTime(2023, 8, 11, 13, 14, 31, 778, DateTimeKind.Utc).AddTicks(6851),
                            Email = "monika02@abv.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            IsModerator = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MONIKA02@ABV.COM",
                            NormalizedUserName = "MONIKA-02",
                            PasswordHash = "AQAAAAEAACcQAAAAEACtYHt107zsqUBGQV8yJ+T7ftPIZA6yYlOTpE7BZlVdy/2JHURzqXc6AxLEJGYTRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "SecurityStamp02",
                            TwoFactorEnabled = false,
                            UserName = "Monika-02"
                        },
                        new
                        {
                            Id = new Guid("cbef4ddc-5788-48ab-9380-aa457c89a554"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "175c4739-aaa9-4ab9-8690-3e0afb4aec54",
                            CreatedOn = new DateTime(2023, 8, 11, 13, 14, 31, 779, DateTimeKind.Utc).AddTicks(8747),
                            Email = "presko03@abv.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            IsModerator = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PRESKO03@ABV.COM",
                            NormalizedUserName = "PRESLAV-03",
                            PasswordHash = "AQAAAAEAACcQAAAAEDGIAsCBDE/MA+bIyPZuFB8EyXkUboA/lmGcAmHHGUgmOr5Zuc1CatK5cWCJwyHQDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "SecurityStamp03",
                            TwoFactorEnabled = false,
                            UserName = "Preslav-03"
                        },
                        new
                        {
                            Id = new Guid("a17550b2-729b-4a14-afdb-738804dbf7f2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53fa3cc4-91ae-4686-832d-e69a70e437b5",
                            CreatedOn = new DateTime(2023, 8, 11, 13, 14, 31, 781, DateTimeKind.Utc).AddTicks(1403),
                            Email = "admin@abv.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            IsModerator = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.COM",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEJtd8eh37GfS0BS+mdWVEjpVcY2xrq+tUGqC1+vGgMrOteJGN0bMzcaR5FAYLDnB6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "SecurityStamp04",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("GymApp.Data.Models.ApplicationUserExercise", b =>
                {
                    b.Property<Guid>("TrainingGuyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.HasKey("TrainingGuyId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ApplicationUsersExercises");
                });

            modelBuilder.Entity("GymApp.Data.Models.ApplicationUserFood", b =>
                {
                    b.Property<Guid>("TrainingGuyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.HasKey("TrainingGuyId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("ApplicationUsersFoods");
                });

            modelBuilder.Entity("GymApp.Data.Models.ApplicationUserTrainingPlan", b =>
                {
                    b.Property<Guid>("TrainingGuyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TrainingPlanId")
                        .HasColumnType("int");

                    b.HasKey("TrainingGuyId", "TrainingPlanId");

                    b.HasIndex("TrainingPlanId");

                    b.ToTable("ApplicationUsersTrainingPlans");
                });

            modelBuilder.Entity("GymApp.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Legs"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Biceps"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Triceps"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Back"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Forearms"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Abs"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Shoulders"
                        });
                });

            modelBuilder.Entity("GymApp.Data.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Benefit")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Execution")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Benefit = "The leg press enables you to exert more force using only your legs, providing a squat-like motion/ without placing weight on your spine or torso, making it ideal for high-rep sets and drop sets.",
                            CategoryId = 1,
                            Execution = "Sit in the leg press seat, and place your feet in the middle of the sled, about shoulder-width /apart. Press the sled out of the rack, lower the safety bars, and then slowly lower the sled towardsyour //chest until your thighs break 90 degrees. Press the sled back up but do not lock out your knees. If your lower back /or hips lift off the seat as you drive the weight back up, you’re going too far down.",
                            ImageUrl = "https://cdn-0.weighttraining.guide/wp-content/uploads/2016/05/Sled-45-degree-Leg-Press-resized.png?ezimgfmt=ng%3Awebp%2Fngcb4",
                            Name = "Leg Press"
                        },
                        new
                        {
                            Id = 2,
                            Benefit = "The hack squat, being a machine, offers enhanced stability compared to free-weight squat /variations, its predefined path reducing the risk of injury and accommodating pre-existing injuries.",
                            CategoryId = 1,
                            Execution = "Your stance on the foot platform will closely mimic that of your back squat stance. Youwant //your feet slightly outside shoulder width with feet angled slightly outward — they should be in linewith /the knee /as it tracks forward during the descent. \r\n\r\nYour torso should be stable with yourabdominals/ engaged and your /lower back flat on the back pad. Maintain a neutral head position as you lower you body/ until the bottoms of your /thighs are parallel to the foot platform and drive through your feet to the top.",
                            ImageUrl = "https://www.bodybuildingmealplan.com/wp-content/uploads/Hack-Squat-Muscles-Worked.jpg",
                            Name = "Hack Squat"
                        },
                        new
                        {
                            Id = 3,
                            Benefit = "The barbell curl, with its simple and effective mechanics, has a small learning curve,making /it /ideal for beginners, while still providing benefits to more advanced lifters, allowing them to loadtheir /biceps/ with heavier weights and build stronger biceps more quickly.",
                            CategoryId = 2,
                            Execution = "With an underhand grip slightly wider than the shoulders, grab a barbell, pull yourshoulders //back, and position your elbows under your shoulder joints or slightly in front by your ribs; then,curl /the barbell /up using your biceps to expose the fronts of your biceps.",
                            ImageUrl = "https://cdn-0.weighttraining.guide/wp-content/uploads/2016/05/barbell-curl-resized.png?/ezimgfmt=ng%3Awebp%2Fngcb4",
                            Name = "Barbell Curl"
                        },
                        new
                        {
                            Id = 4,
                            Benefit = "The hammer curl, with its comfortable neutral wrist position, allows for lifting heavier weights /and accumulating more muscle-building volume over time, effectively targeting the inner biceps muscleand //forearm to promote denser arms.",
                            CategoryId = 2,
                            Execution = "While standing, hold a dumbbell in each hand with wrists facing each other, tuck your arm in //at your sides, and flex your elbows to curl the dumbbells up towards your shoulders, then lower them back down with /control.",
                            ImageUrl = "https://weighttraining.guide/wp-content/uploads/2016/11/Dumbbell-Hammer-Curl-resized.png",
                            Name = "Hammer Curl"
                        },
                        new
                        {
                            Id = 5,
                            Benefit = "This exercise offers versatility with options such as barbells, kettlebells, or dumbbells, making/ it a versatile triceps exercise that capitalizes on your strength in this position, leading to significant /triceps strength gains.",
                            CategoryId = 3,
                            Execution = "Begin by lying on a bench with the hands supporting a weight (barbell, dumbbells, orcable //attachments) at the top of the bench pressing position, aligning the back and hips as in a bench press; slightly /pull the elbows back, pointing them behind you, as you lower the bar handle or loads towards your/head, almost /touching the forehead, experiencing a stretch on the triceps and partial engagement of the /lats,and finally, push /the bar back up.",
                            ImageUrl = "https://cdn-0.weighttraining.guide/wp-content/uploads/2016/12/Decline-Skull-crusher-resized.png?ezimgfmt=ng%3Awebp%2Fngcb4",
                            Name = "Skullcrusher"
                        },
                        new
                        {
                            Id = 6,
                            Benefit = "This exercise allows for complete isolation of the triceps, providing the ability to feelthe //muscle contract and achieve a satisfying pump.",
                            CategoryId = 3,
                            Execution = "Set the cables or band at a high anchor point, face your body towards it, place yourfeet //together, keep your elbows by your sides, chest up, back flat, and hips angled slightly forward, thengrab/ the /handles or band and push them down by fully extending your elbows, ensuring that your elbows are slightly in front /of your shoulders.",
                            ImageUrl = "https://cdn-0.weighttraining.guide/wp-content/uploads/2016/05/Triceps-Rope-Pushdown-resized.png?/ezimgfmt=ng%3Awebp%2Fngcb4",
                            Name = "Triceps Pushdown"
                        },
                        new
                        {
                            Id = 7,
                            Benefit = "Using two separate dumbbells for pressing exercises allows for easier customization of a /comfortable position, particularly beneficial for individuals with shoulder or elbow discomfort, while /also promoting enhanced joint and muscle stability; furthermore, the individual effort required by each /side helps balance any strength disparities and enables weaker sides of the body to catch up.",
                            CategoryId = 4,
                            Execution = "Begin by sitting on a flat bench and hinging forward to pick up each dumbbell, placingthem /on /your knees; after getting set, lean back and drive the dumbbells back towards you using your knees,while //simultaneously pressing the weights over your chest, then lower the weights with elbows tucked at a 45-degree angle /until they break 90 degrees, followed by driving the dumbbells back up, optionally /transitioningto a neutral grip /position with palms facing each other for the press.",
                            ImageUrl = "https://fitnessvolt.com/wp-content/uploads/2018/04/dumbbell-bench-press.jpg",
                            Name = "Dumbbell Bench Press"
                        },
                        new
                        {
                            Id = 8,
                            Benefit = "The bent-over row can be effectively executed using tools like kettlebells, dumbbells, ora /cable/ machine, allowing for efficient muscle overload as you can handle significant weight in the bent-overrow/ /position.",
                            CategoryId = 5,
                            Execution = "To perform the barbell bent-over row, set up in a deadlift position with feet shoulderwidth //apart in front of a loaded barbell, hinge at the hips to achieve a parallel torso to the floor, gripthe /barbell /slightly wider than your typical deadlift grip, lean back to distribute weight on your heels, and initiate the row /by pulling with your elbow until the barbell touches around your belly button, ensuring /thebarbell doesn't touch /the floor between repetitions, and considering a wider grip or a more upright /torso forindividuals with longer /arms.",
                            ImageUrl = "https://weighttraining.guide/wp-content/uploads/2016/10/Bent-over-barbell-row.png",
                            Name = "Bent-Over Row"
                        },
                        new
                        {
                            Id = 9,
                            Benefit = "Engaging both forearm extensors and flexors, the wrist roller exercise strengthens these muscles /while the thick grip enhances grip strength, requiring focused attention on the wrists and forearms,which/ /are typically secondary to the primary movers.",
                            CategoryId = 6,
                            Execution = "Begin with a 2.5, five, or 10-pound weight plate, stand with feet hip-width apart, gripthe //wrist roller with knuckles facing towards you, gradually execute a front raise to elevate the roller to shoulder /height, roll the weight up while alternating hands until fully wound, and then slowly reverse the/movement.",
                            ImageUrl = "https://cdn-0.weighttraining.guide/wp-content/uploads/2022/11/Wrist-roller.png?ezimgfmt=ng%/3Awebp%2Fngcb4",
                            Name = "Wrist Roller"
                        },
                        new
                        {
                            Id = 10,
                            Benefit = "By resisting gravity and rotational forces, the L-sit exercise enhances full-bodystrength, //demanding significant isometric strength while stimulating exceptional abdominal strength andstability, /making it a/ valuable core strengthening exercise that prepares lifters and gymnastic athletes formore /challenging athletic /movements.",
                            CategoryId = 7,
                            Execution = "Sit between two dumbbells or kettlebells, placing each hand on a handle, then elevateyour /body/ off the floor by extending your legs and maintain an isometric hold, ensuring tension in the middleand /upper /back.",
                            ImageUrl = "https://weighttraining.guide/wp-content/uploads/2021/10/Floor-L-sit-fixed.png",
                            Name = "L-Sit"
                        },
                        new
                        {
                            Id = 11,
                            Benefit = "The dumbbell shoulder press targets and develops muscles in the shoulders, triceps, biceps,and //upper back, leading to improvements in overall upper body physique, and as a compound exercise utilizing multiple /joints and muscles simultaneously, it is more effective in producing results compared to /isolationexercises.",
                            CategoryId = 8,
                            Execution = "Begin by grabbing a pair of dumbbells and lifting them to the starting position at your /shoulders, lightly brace your core while inhaling, press the dumbbells up to straight arms while exhaling,/inhale at/ the top or during controlled lowering back to your shoulders, and repeat for the desired number/ ofrepetitions.",
                            ImageUrl = "https://cdn-0.weighttraining.guide/wp-content/uploads/2016/05/Dumbbell-Shoulder-Press-resized.png?ezimgfmt=ng%3Awebp%2Fngcb4",
                            Name = "Dumbbell Shoulder Press"
                        });
                });

            modelBuilder.Entity("GymApp.Data.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<double>("Carbs")
                        .HasColumnType("float");

                    b.Property<double>("Fat")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Protein")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("GymApp.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GymApp.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("GymApp.Data.Models.Supplement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Benefits")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Supplements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Benefits = "The most biologically accessible form of calcium, enriched with vitamin D2, magnesium, copper,/ zinc, and manganese, ensures the health of muscles, bones, and teeth, participates in blood clotting, /supports proper neurotransmission, guarantees immune function, and promotes the well-being of hair, /nails, andskin,/ conveniently available in tablet form and suitable for vegetarians and vegans.",
                            Description = "Calcium citrate, in tablet form, is the most biologically accessible form ofcalcium, //ensuring optimal health for muscles, bones, and teeth, while also participating in blood clottingand /supporting /proper neurotransmission. Additionally, it is enriched with other beneficial electrolytes /suchas vitamin D2, /magnesium, copper, manganese, and zinc, which play crucial roles in bone metabolism,/ reducefatigue, support immune /and nervous system health, promote healthy hair, nails, and skin, and /protect cellsfrom oxidative stress, making /the product suitable for vegans and vegetarians.",
                            ImageUrl = "https://gymbeam.bg/media/catalog/product/cache/70f742f66feec18cb83790f14444a3d1/u/n//untitled_design_-_2020-04-03t164935.609.png",
                            Ingredients = "Hydroxypropyl cellulose, vegetable coating, croscarmellose sodium, silicondioxide, //magnesium stearate (vegetable source), and stearic acid (vegetable source).",
                            Manufacturer = "NOW",
                            Name = "Calcium Citrate 100 Tablets",
                            Price = 29.99m,
                            Type = "Supplement"
                        },
                        new
                        {
                            Id = 2,
                            Benefits = "500 mg of Ashwagandha (Withania somnifera) extract, containing 5% of active compounds called /withanolides, classified as adaptogens, may help enhance the body's resilience and aid in betterstress //management, available in convenient capsule form.",
                            Description = "Ashwagandha or Indian Ginseng (Withania somnifera) is a plant classified among adaptogens, /compounds known for their beneficial effects on the body, particularly in increasing itsresilience /and /improving the adaptation process to stress. Similar to how our muscles become stronger and growwhen we //exercise, adaptogens can enhance the body's resistance to stress and aid in better stress management. It's no wonder/ that Ashwagandha is popular among individuals experiencing daily stress at work, school, /or intheir personal /lives. However, its benefits don't end there; this plant is still being researched /by scientifi institutions for /its potential positive effects in reducing anxiety, fatigue, lowering the/ stress hormonecortisol, and enhancing /athletic performance, strength, and sleep. Additionally, it may /support our mentalwell-being and aid in /relaxation.",
                            ImageUrl = "https://gymbeam.bg/media/catalog/product/cache/70f742f66feec18cb83790f14444a3d1/a/s//ashwagandha_90_caps.png",
                            Ingredients = "Ashwagandha extract (Withania somnifera) (5% withanolides), anti-caking agent(calcium //phosphate, magnesium stearate), gelatin capsule.",
                            Manufacturer = "GymBeam",
                            Name = "Ashwagandha 90 Capsules",
                            Price = 19.99m,
                            Type = "Supplement"
                        },
                        new
                        {
                            Id = 3,
                            Benefits = "This dietary supplement, containing this essential mineral, participates in hundredsof //biological processes, supporting proper carbohydrate metabolism, bone health, protein synthesis, maintaining normal /testosterone levels, enhancing fertility and reproductive function, promoting healthy/ skin,hair, and nails, /supporting good vision, boosting the immune system, influencing proper /metabolism of fattyacids, aiding in DNA /synthesis, maintaining cognitive functions, affecting the /metabolism of vitamin A,protecting cells against /oxidative stress, and suitable for vegans, making it /ideal for anyone striving tomaintain optimal health.",
                            Description = "Zinc is an essential mineral found in many food supplements, vital for hundreds of /biological processes in the body, supporting proper metabolism of macronutrients like carbohydrates, /crucialfor /energy supply to athletes and active individuals. It also aids in maintaining bone health, /proteinsynthesis for /muscle growth, and has a positive impact on testosterone levels in men. Zinc plays/ a vital rolein various bodily /processes, positively affecting muscle size and strength, fertility, and/ reproductivefunction, benefiting skin, /hair, and nails for women, and supporting vision for those /spending time in front o screens. Additionally, as an /antioxidant, zinc protects cells against /oxidative stress, boosts the immunesystem, aids in fat metabolism, DNA /synthesis, cognitive functions, /and vitamin A metabolism, making it anideal supplement for overall health and /suitable for vegans.",
                            ImageUrl = "https://gymbeam.bg/media/catalog/product/cache/70f742f66feec18cb83790f14444a3d1/z/i//zinc_100_tabs_gymbeam.png",
                            Ingredients = "Filler (microcrystalline cellulose, calcium hydrogen phosphate), zinc oxide,coating //(stearic acid), anti-caking agent (magnesium stearate).",
                            Manufacturer = "GymBeam",
                            Name = "Zinc 100 Tablets",
                            Price = 10.99m,
                            Type = "Supplement"
                        },
                        new
                        {
                            Id = 4,
                            Benefits = "This supplement contains 1000 mg of ascorbic acid (Vitamin C), offered in easy-toswallow //tablets, supporting the proper functioning of the immune and nervous systems, promoting mentalbalance, /reducing /fatigue, maintaining energy metabolism, bone and cartilage health, collagen production,skin, /gum, and teeth /function, protecting cells from oxidative stress, enhancing iron absorption, and supporting cardiovascular health, /enriched with rosehip extract, promoting overall health and /vitality.",
                            Description = "Vitamin C 1000 mg, also known as L-ascorbic acid, is an essential vitamin found ineasy-/to-/swallow tablets and commonly present in various fruits and vegetables. It participates in numerous biological /processes, making it one of the most popular supplements supporting overall health and /vitality.Vitamin C /contributes to the proper functioning of the immune and nervous systems, supports /immunity during an after intense /physical activity, promotes mental balance, reduces fatigue, and aids /in energy metabolism fordaily activities and /sports. Additionally, it maintains bone and cartilage /health, collagen production, and th health of skin, gums, and/ teeth. Moreover, Vitamin C acts as an /antioxidant, protects cells from oxidativestress, enhances iron absorption, /and supports cardiovascular/ health. The supplement is enriched with rosehipextract (Rosa canina), offering a wide /range of /beneficial effects.",
                            ImageUrl = "https://gymbeam.bg/media/catalog/product/cache/70f742f66feec18cb83790f14444a3d1/n/e//new_vitamin_c.png",
                            Ingredients = "Vitamin C (L-ascorbic acid), rosehip extract (Rosa canina), filler(microcrystalline //cellulose), anti-caking agent (magnesium stearate).",
                            Manufacturer = "GymBeam",
                            Name = "Vitamin C 1000mg 180 Tablets",
                            Price = 35.99m,
                            Type = "Supplement"
                        },
                        new
                        {
                            Id = 5,
                            Benefits = "A multi-component whey protein powder, derived from the milk of free-range cows,containing /a /combination of whey concentrate, isolate, and hydrolysate, boasting an impressive 74.8% proteincontent,/ /providing 22.4g of protein per serving, including all essential amino acids and BCAAs, making it an ideal choice to /meet protein intake needs, supporting muscle growth and preservation, with high /bioavailabilit and easy /digestibility, enriched with selected vitamins and minerals, promoting muscle /function and bonehealth, positively /impacting optimal testosterone levels, aiding in reducing fatigue /and tiredness, supportingproper immune function, /offering a delightful taste and easy solubility, /containing only natural flavors andcolors, a great way to enrich /cereals and other dishes with high-/quality protein, suitable for athletes and al active individuals, perfect for /post-workout or anytime /during the day.",
                            Description = "Just Whey Protein is a multi-component whey protein powder that effectivelysupports //protein intake after workouts or at any other time of the day, containing a unique combination ofwhey /protein /concentrate, isolate, and hydrolysate, ensuring high absorbability and bioavailability for the body, providing 18% /EPA and 12% DHA, supporting cardiovascular functions, brain functions, and good /vision,enriched with vitamin E, /respecting nature and produced from the milk of free-range cows, with /added enzymesfor better nutrient absorption, /containing 74.8% protein content, supporting muscle growth/ and maintenance,beneficial for athletes, active /individuals, and those on a weight loss or recovery /journey, enriched withvitamins and minerals like B6, magnesium,/ and zinc, easily consumed in various /ways and delicious flavors,suitable for a healthy lifestyle.",
                            ImageUrl = "https://gymbeam.bg/media/catalog/product/cache/70f742f66feec18cb83790f14444a3d1/j/u//just_whey_unflavored_1_kg_gymbeam_1.png",
                            Ingredients = "Whey protein concentrate powder, whey protein isolate powder, protein hydrolysate, minerals/ (magnesium citrate, zinc oxide), vitamins (vitamin E - tocopheryl acetate, vitamin B6 - pyridoxine /hydrochloride), DigeZyme® - a complex of digestive enzymes, bromelain.",
                            Manufacturer = "GymBeam",
                            Name = "Just Whey 1kg",
                            Price = 99.99m,
                            Type = "Supplement"
                        },
                        new
                        {
                            Id = 6,
                            Benefits = "100% Creatine monohydrate, a highly researched nutritional supplement, enhancesphysical //performance during short bursts of intense exercises, making it suitable for strength athletes andteam /sport /enthusiasts; it comes in a soluble powder form that can be easily mixed with water, juice, or /postworkout protein /shakes.",
                            Description = "100% Creatine monohydrate is a popular supplement known for enhancing physical performance /in short, intense exercises, making it highly favored by athletes, including strength trainers,team //sport enthusiasts, and HIIT practitioners. It is a naturally occurring substance in the body, and supplementing with/ creatine powder ensures easy intake of the recommended daily dose of at least 3 /grams,supporting improved exercise/ performance without the need for cycling or time-limited usage.",
                            ImageUrl = "https://gymbeam.bg/media/catalog/product/cache/70f742f66feec18cb83790f14444a3d1/c/r//creatinemonohydrate_500_1.jpg",
                            Ingredients = "Unflavored: Creatine monohydrate",
                            Manufacturer = "GymBeam",
                            Name = "Creatine Monohydrate 500g",
                            Price = 39.99m,
                            Type = "Supplement"
                        });
                });

            modelBuilder.Entity("GymApp.Data.Models.TrainingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("TrainingPlans");
                });

            modelBuilder.Entity("GymApp.Data.Models.UserFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Calories")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("Carbs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("Fat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("Grams")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Protein")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.ToTable("UsersFoods");
                });

            modelBuilder.Entity("GymApp.Data.Models.Wear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fabric")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("WearCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WearCategoryId");

                    b.ToTable("Clothes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Black",
                            Description = "The Hardcore T-Shirt delivers a soft feel, sweat-wicking performance and a great rangeof  //motion to get you through your workout in total comfort.",
                            Fabric = "Cutton",
                            ImageUrl = "https://gymtier.com/wp-content/uploads/2021/01/menstshirt-empty-motivation-hardcore-black.jpg",
                            Name = "Hardcore T-shirt Black",
                            Price = 29.99m,
                            Size = "S",
                            Type = "Wear",
                            WearCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            Color = "White",
                            Description = "The Hardcore T-Shirt delivers a soft feel, sweat-wicking performance and a great rangeof  //motion to get you through your workout in total comfort.",
                            Fabric = "Cutton",
                            ImageUrl = "https://gymtier.com/wp-content/uploads/2021/01/menstshirt-empty-motivation-hardcore-white.jpg",
                            Name = "Hardcore T-shirt White",
                            Price = 29.99m,
                            Size = "S",
                            Type = "Wear",
                            WearCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            Color = "Black",
                            Description = "The Gym Warrior T-Shirt delivers a soft feel, sweat-wicking performance and a great range o  //motion to get you through your workout in total comfort.",
                            Fabric = "Cutton",
                            ImageUrl = "https://ae01.alicdn.com/kf/S9bbb3f96fb6f4a8e95055daca201ef81K.jpg?width=800&height=800&hash=1600",
                            Name = "Gym Warrior T-shirt Black",
                            Price = 29.99m,
                            Size = "S",
                            Type = "Wear",
                            WearCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            Color = "Black",
                            Description = "The Cicle T-Shirt delivers a soft feel, sweat-wicking performance and a great range ofmotion  //to get you through your workout in total comfort.",
                            Fabric = "Cutton",
                            ImageUrl = "https://media.boohoo.com/i/boohoo/bmm18988_black_xl/male-black-man-active-oversized-repeatt- //shirt/?w=900&qlt=default&fmt.jp2.qlt=70&fmt=auto&sm=fit",
                            Name = "The Cicle T-shirt Black",
                            Price = 29.99m,
                            Size = "S",
                            Type = "Wear",
                            WearCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            Color = "Black",
                            Description = "The Hardcore Hoodie delivers a soft feel, sweat-wicking performance and a great range / ofmotion/ to get you through your workout in total comfort.",
                            Fabric = "Cutton",
                            ImageUrl = "https://www.hard-wear.com/media/catalog/product/cache/74aab73cb060cf90b1e98012d0101b9a/1/0/100-hardcore-hooded-logo-gabber-4-life-black-301-s14-050-1.jpeg",
                            Name = "Hardcore Hoodie Black",
                            Price = 49.99m,
                            Size = "S",
                            Type = "Wear",
                            WearCategoryId = 2
                        },
                        new
                        {
                            Id = 6,
                            Color = "White",
                            Description = "The Hardcore Hoodie delivers a soft feel, sweat-wicking performance and a great range / ofmotion/ to get you through your workout in total comfort.",
                            Fabric = "Cutton",
                            ImageUrl = "https://ae01.alicdn.com/kf/Hef62f5408d324ff684905fb5829dac8dX/Europe-Size-XXL-HardcoreSportswear-//Men-Fashion-Hardcore-Harajuku-Hoodies-Cool-Fun-Hardcore-Hoodie-Jacket-Camisetas.jpg",
                            Name = "Hardcore Hoodie White",
                            Price = 49.99m,
                            Size = "S",
                            Type = "Wear",
                            WearCategoryId = 2
                        });
                });

            modelBuilder.Entity("GymApp.Data.Models.WearCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("WearCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hoodies"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a12d2cfd-0058-4c64-babd-8c1437001f78"),
                            ConcurrencyStamp = "1eaaad87-67cc-499f-a84c-38278d84793d",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("65711ed3-baf2-4084-ab0c-dc0b7af05a45"),
                            ConcurrencyStamp = "e3fd6019-193e-4af3-bcfa-acbf85f1c9d8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f37fa09c-9247-42c4-b748-b5c8e10c6af9"),
                            RoleId = new Guid("a12d2cfd-0058-4c64-babd-8c1437001f78")
                        },
                        new
                        {
                            UserId = new Guid("a82fbea5-96ff-48f0-be6f-e32f27604bff"),
                            RoleId = new Guid("a12d2cfd-0058-4c64-babd-8c1437001f78")
                        },
                        new
                        {
                            UserId = new Guid("cbef4ddc-5788-48ab-9380-aa457c89a554"),
                            RoleId = new Guid("a12d2cfd-0058-4c64-babd-8c1437001f78")
                        },
                        new
                        {
                            UserId = new Guid("a17550b2-729b-4a14-afdb-738804dbf7f2"),
                            RoleId = new Guid("65711ed3-baf2-4084-ab0c-dc0b7af05a45")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GymApp.Data.Models.ApplicationUserExercise", b =>
                {
                    b.HasOne("GymApp.Data.Models.Exercise", "Exercise")
                        .WithMany("UsersExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymApp.Data.Models.ApplicationUser", "TrainingGuy")
                        .WithMany("UsersExercises")
                        .HasForeignKey("TrainingGuyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("TrainingGuy");
                });

            modelBuilder.Entity("GymApp.Data.Models.ApplicationUserFood", b =>
                {
                    b.HasOne("GymApp.Data.Models.UserFood", "Food")
                        .WithMany("UsersFood")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymApp.Data.Models.ApplicationUser", "TrainingGuy")
                        .WithMany("UsersFoods")
                        .HasForeignKey("TrainingGuyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("TrainingGuy");
                });

            modelBuilder.Entity("GymApp.Data.Models.ApplicationUserTrainingPlan", b =>
                {
                    b.HasOne("GymApp.Data.Models.ApplicationUser", "TrainingGuy")
                        .WithMany("UsersTrainingPlans")
                        .HasForeignKey("TrainingGuyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymApp.Data.Models.TrainingPlan", "TrainingPlan")
                        .WithMany("UsersTrainingPlan")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingGuy");

                    b.Navigation("TrainingPlan");
                });

            modelBuilder.Entity("GymApp.Data.Models.Exercise", b =>
                {
                    b.HasOne("GymApp.Data.Models.Category", "Category")
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GymApp.Data.Models.Order", b =>
                {
                    b.HasOne("GymApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymApp.Data.Models.Product", b =>
                {
                    b.HasOne("GymApp.Data.Models.ApplicationUser", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymApp.Data.Models.TrainingPlan", b =>
                {
                    b.HasOne("GymApp.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GymApp.Data.Models.Wear", b =>
                {
                    b.HasOne("GymApp.Data.Models.WearCategory", "WearCategory")
                        .WithMany("Clothes")
                        .HasForeignKey("WearCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WearCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GymApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GymApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GymApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymApp.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("UsersExercises");

                    b.Navigation("UsersFoods");

                    b.Navigation("UsersTrainingPlans");
                });

            modelBuilder.Entity("GymApp.Data.Models.Category", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GymApp.Data.Models.Exercise", b =>
                {
                    b.Navigation("UsersExercises");
                });

            modelBuilder.Entity("GymApp.Data.Models.TrainingPlan", b =>
                {
                    b.Navigation("UsersTrainingPlan");
                });

            modelBuilder.Entity("GymApp.Data.Models.UserFood", b =>
                {
                    b.Navigation("UsersFood");
                });

            modelBuilder.Entity("GymApp.Data.Models.WearCategory", b =>
                {
                    b.Navigation("Clothes");
                });
#pragma warning restore 612, 618
        }
    }
}
